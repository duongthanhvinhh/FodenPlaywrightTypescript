# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: datepicker
- Location: /home/runner/work/FodenPlaywrightTypescript/FodenPlaywrightTypescript/tests/uiComponents.spec.ts:153:5

# Error details

```
Error: locator.click: Test timeout of 30000ms exceeded.
Call log:
  - waiting for getByText('Forms')
    - locator resolved to <span class="menu-title ng-tns-c140-2">Forms</span>
  - attempting click action
    2 × waiting for element to be visible, enabled and stable
      - element is not visible
    - retrying click action
    - waiting 20ms
    2 × waiting for element to be visible, enabled and stable
      - element is not visible
    - retrying click action
      - waiting 100ms
    53 × waiting for element to be visible, enabled and stable
       - element is not visible
     - retrying click action
       - waiting 500ms

    at /home/runner/work/FodenPlaywrightTypescript/FodenPlaywrightTypescript/tests/uiComponents.spec.ts:154:35
```

# Page snapshot

```yaml
- navigation:
  - link:
    - img
  - link "PW-test"
  - button "Light"
  - button:
    - img
  - link:
    - img
  - link:
    - img
- list:
  - listitem:
    - link "IoT Dashboard":
      - img
  - listitem: FEATURES
  - listitem:
    - link "Forms":
      - img
    - list:
      - listitem:
        - link "Form Layouts"
      - listitem:
        - link "Datepicker"
  - listitem:
    - link "Modal & Overlays":
      - img
    - list:
      - listitem:
        - link "Dialog"
      - listitem:
        - link "Window"
      - listitem:
        - link "Popover"
      - listitem:
        - link "Toastr"
      - listitem:
        - link "Tooltip"
  - listitem:
    - link "Extra Components":
      - img
    - list:
      - listitem:
        - link "Calendar"
  - listitem:
    - link "Charts":
      - img
    - list:
      - listitem:
        - link "Echarts"
  - listitem:
    - link "Tables & Data":
      - img
    - list:
      - listitem:
        - link "Smart Table"
      - listitem:
        - link "Tree Grid"
  - listitem:
    - link "Auth":
      - img
    - list:
      - listitem:
        - link "Login"
      - listitem:
        - link "Register"
      - listitem:
        - link "Request Password"
      - listitem:
        - link "Reset Password"
- text:  Light ON  Roller Shades ON  Wireless Audio ON  Coffee Maker ON
- list:
  - listitem:
    - link "Temperature"
  - listitem:
    - link "Humidity"
- img
- text: ° 24 Celsius
- button:
  - img
- radio "" [checked]
- text: 
- radio ""
- text: 
- radio ""
- text: 
- radio ""
- text:  Consumed 816 kWh Spent 291 USD
- button "week"
- text: Room Management
- img: Kitchen Bedroom Hallway Living Room
- heading "Harder" [level=4]
- text: Daft Punk
- slider: "0"
- button:
  - img
- button:
  - img
- list:
  - listitem:
    - link "Contacts"
  - listitem:
    - link "Recent"
- list:
  - listitem:
    - text: Nick Jones mobile
    - img
  - listitem:
    - text: Eva Moor home
    - img
  - listitem:
    - text: Jack Williams mobile
    - img
  - listitem:
    - text: Lee Wong mobile
    - img
  - listitem:
    - text: Alan Thompson home
    - img
  - listitem:
    - text: Kate Martinez work
    - img
- text: "Solar Energy Consumption 6.421 kWh out of 8.421 kWh UI Kitten UI Kitten is a framework that contains a set of commonly used UI components styled in a similar way. The most awesome thing: you can change themes on the fly by just passing a different set of variables. 100% native. Give our kitten a try!"
- link:
  - img
- link ""
- link ""
- link:
  - img
- text: Traffic Consumption
- button "month"
- text: New York Mon 29 May 20°
- img
- text: max 23° min 19° wind 4 km/h hum 87% Sun  17° Mon  19° Tue  22° Wed  21° Security Cameras
- button ""
- button:
  - img
- text: "Camera #1 Camera #2 Camera #3 Camera #4"
- img
- text: Pause
- img
- text: Logs
- img
- text: Search
- img
- text: Setup
- navigation:
  - text: Created with ♥ by
  - link "Akveo"
  - text: "2019"
  - link ""
  - link ""
  - link ""
  - link ""
```

# Test source

```ts
   54 |     const allBoxes = page.getByRole('checkbox')
   55 |     for(const box of await allBoxes.all()){
   56 |         await box.check({force: true})
   57 |         expect(await box.isChecked()).toBeTruthy()
   58 |     }
   59 | })
   60 |
   61 | test('lists and dropdowns', async ({page}) => {
   62 |     const dropdownMenu = page.locator('ngx-header nb-select')
   63 |     await dropdownMenu.click()
   64 |     page.getByRole('list') //Use it when the list has the ul tag
   65 |     page.getByRole('listitem') //Use it when the list has li tag
   66 |
   67 |     // const optionList = page.getByRole('list').locator('nb-option') //Not widely used
   68 |     const optionList = page.locator('nb-option-list nb-option')
   69 |     await expect(optionList).toHaveText(["Light", "Dark", "Cosmic", "Corporate"])
   70 |     await optionList.filter({hasText: "Cosmic"}).click()
   71 |
   72 |     //verify color of element
   73 |     const header = page.locator('nb-layout-header')
   74 |     await expect(header).toHaveCSS('background-color', 'rgb(50, 50, 89)')
   75 |
   76 |     const colors = {
   77 |         "Light": "rgb(255, 255, 255)",
   78 |         "Dark": "rgb(34, 43, 69)",
   79 |         "Cosmic": "rgb(50, 50, 89)",
   80 |         "Corporate": "rgb(255, 255, 255)"
   81 |     }
   82 |
   83 |     await dropdownMenu.click()
   84 |     for(const color in colors){
   85 |         await optionList.filter({hasText: color}).click()
   86 |         await expect(header).toHaveCSS('background-color', colors[color])
   87 |         if(color != "Corporate"){
   88 |             await dropdownMenu.click()
   89 |         }
   90 |     }
   91 |
   92 | })
   93 |
   94 | test('tooltips', async ({page}) => {
   95 |     await page.getByText('Modal & Overlays').click()
   96 |     await page.getByText('Tooltip').click()
   97 |
   98 |     const tooltipCard = page.locator('nb-card', {hasText: 'Tooltip Placements'})
   99 |     await tooltipCard.getByRole('button', {name: "Top"}).hover()
  100 |
  101 |     const tooltip = await page.locator('nb-tooltip').textContent()
  102 |     expect(tooltip).toEqual('This is a tooltip')
  103 |
  104 |
  105 |     page.getByRole('tooltip') //Only use if you have a role tooltip created
  106 | })
  107 |
  108 | test('dialogs', async ({page}) => {
  109 |     await page.getByText('Tables & Data').click()
  110 |     await page.getByText('Smart Table').click()
  111 |
  112 |     //We need to register the action we want to treat with dialog before triggering the dialog
  113 |     page.on('dialog', dialog => {
  114 |         expect(dialog.message()).toEqual('Are you sure you want to delete?')
  115 |         dialog.accept()
  116 |     })
  117 |
  118 |     await page.getByRole('table').locator('tr', {hasText: "mdo@gmail.com"}).locator('.nb-trash').click()
  119 |     await expect(page.locator('table tr').first()).not.toHaveText("mdo@gmail.com")
  120 | })
  121 |
  122 | test('tables', async ({page}) => {
  123 |     await page.getByText('Tables & Data').click()
  124 |     await page.getByText('Smart Table').click()
  125 |
  126 |     //Get any row by text in row
  127 |     const targetRow = page.getByRole('row', {name: 'twitter@outlook.com'})
  128 |     await targetRow.locator('.nb-edit').click()
  129 |     await page.locator('input-editor').getByPlaceholder('Age').clear()
  130 |     await page.locator('input-editor').getByPlaceholder('Age').fill('35')
  131 |     await page.locator('.nb-checkmark').click()
  132 |
  133 |     //test filter of the table
  134 |     const ages = ["20", "30", "40", "200"]
  135 |     for(let age of ages){
  136 |         await page.locator('input-filter').getByPlaceholder('Age').clear()
  137 |         await page.locator('input-filter').getByPlaceholder('Age').fill(age)
  138 |         await page.waitForTimeout(5000)
  139 |
  140 |         const ageRows = page.locator('tbody tr')
  141 |
  142 |         for(let row of await ageRows.all()){
  143 |             const cellValue = await row.locator('td').last().textContent()
  144 |             if(age == "200"){
  145 |                 expect(await page.getByRole('table').textContent()).toContain('No data found')
  146 |             } else {
  147 |                 expect(cellValue).toEqual(age)
  148 |             }
  149 |         }
  150 |     }
  151 | })
  152 |
  153 | test('datepicker', async ({page}) => {
> 154 |     await page.getByText('Forms').click()
      |                                   ^ Error: locator.click: Test timeout of 30000ms exceeded.
  155 |     await page.getByText('Datepicker').click()
  156 |     const calendarInput = page.getByPlaceholder('Form Picker')
  157 |     await calendarInput.click()
  158 |
  159 |     let date = new Date()
  160 |     date.setDate(date.getDate() + 7)
  161 |     const expectedDate = date.getDate().toString()
  162 |     const expectedMonthShort = date.toLocaleString('En-US', {month: 'short'})
  163 |     const expectedMonthLong = date.toLocaleString('En-US', {month: 'long'})
  164 |
  165 |     const expectedYear = date.getFullYear()
  166 |     const dateToAssert = `${expectedMonthShort} ${expectedDate}, ${expectedYear}`
  167 |
  168 |     let calendarMonthAndYear = await page.locator('nb-calendar-view-mode').textContent()
  169 |     const expectedMonthAndYear = ` ${expectedMonthLong} ${expectedYear} `
  170 |     while(!calendarMonthAndYear?.includes(expectedMonthAndYear)){
  171 |         await page.locator('nb-calendar-pageable-navigation [data-name="chevron-right"]').click()
  172 |         calendarMonthAndYear = await page.locator('nb-calendar-view-mode').textContent()
  173 |     }
  174 |
  175 |     await page.locator('[class="day-cell ng-star-inserted"]').getByText(expectedDate, {exact: true}).click() //If we don't use exact: true here, test will be failed because pw will also returns 1, 10, 11, 12, ... in case you getByText('1)
  176 |     await expect(calendarInput).toHaveValue(dateToAssert)
  177 | })
  178 |
  179 |
  180 | test('slider', async ({page}) =>{
  181 |
  182 |     //Update attribute
  183 |     // const tempGauge = page.locator('[tabtitle="Temperature"] ngx-temperature-dragger circle')
  184 |     // await tempGauge.evaluate(node => {
  185 |     //     node.setAttribute('cx', "50.0902383751836")
  186 |     //     node.setAttribute('cy', "45.30111643782216")
  187 |     // })
  188 |     // await tempGauge.click()
  189 |
  190 |     //Mouse event
  191 |     const tempBox = page.locator('[tabtitle="Temperature"] ngx-temperature-dragger') 
  192 |     await tempBox.scrollIntoViewIfNeeded()
  193 |     const box = await tempBox.boundingBox() 
  194 |     /**
  195 |      * tempbox is a handle to some DOM element on the page.
  196 |         boundingBox() gets its position and size: e.g
  197 |         {
  198 |         x: 100,
  199 |         y: 200,
  200 |         width: 150,
  201 |         height: 100
  202 |         }
  203 |      */
  204 |     if (box) {
  205 |         const x = box.x + box.width / 2 
  206 |         const y = box.y + box.height / 2 //(x, y) now is the center point of element where we do drag-drop
  207 |         await page.mouse.move(x, y) //move the virtual mouse to the (x,y)
  208 |         await page.mouse.down() //press the mouse - like start dragging
  209 |         await page.mouse.move(x+100, y) //move the mouse horizontally 100px to the right, still holding the mouse
  210 |         await page.mouse.move(x+100, y+100) //move the mouse 100px to the bottom, still holding the mouse
  211 |         await page.mouse.up() //release the mouse
  212 |     } else {
  213 |         throw new Error("Bounding box is null");
  214 |     }
  215 | })
  216 |
  217 | test('drag and drop', async ({page}) => {
  218 |     await page.goto('https://www.globalsqa.com/demo-site/draganddrop/')
  219 |     const iframe = page.frameLocator('[rel-title="Photo Manager"] iframe')
  220 |
  221 |     await iframe.locator('li', {hasText: "High Tatras 2"}).dragTo(iframe.locator('#trash'))
  222 |
  223 |     //more precise control
  224 |     await iframe.locator('li', {hasText: "High Tatras 4"}).hover()
  225 |     await page.mouse.down()
  226 |     await iframe.locator('#trash').hover()
  227 |     await page.mouse.up()
  228 |
  229 |     await expect(iframe.locator('#trash li h5')).toHaveText(["High Tatras 2", "High Tatras 4"])
  230 | })
  231 |
  232 |
```