# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: lists and dropdowns
- Location: /home/runner/work/FodenPlaywrightTypescript/FodenPlaywrightTypescript/tests/uiComponents.spec.ts:61:5

# Error details

```
Error: browserType.launch: Target page, context or browser has been closed
Browser logs:

╔════════════════════════════════════════════════════════════════════════════════════════════════╗
║ Looks like you launched a headed browser without having a XServer running.                     ║
║ Set either 'headless: true' or use 'xvfb-run <your-playwright-app>' before running Playwright. ║
║                                                                                                ║
║ <3 Playwright Team                                                                             ║
╚════════════════════════════════════════════════════════════════════════════════════════════════╝
Call log:
  - <launching> /home/runner/.cache/ms-playwright/chromium-1161/chrome-linux/chrome --disable-field-trial-config --disable-background-networking --disable-background-timer-throttling --disable-backgrounding-occluded-windows --disable-back-forward-cache --disable-breakpad --disable-client-side-phishing-detection --disable-component-extensions-with-background-pages --disable-component-update --no-default-browser-check --disable-default-apps --disable-dev-shm-usage --disable-extensions --disable-features=AcceptCHFrame,AutoExpandDetailsElement,AvoidUnnecessaryBeforeUnloadCheckSync,CertificateTransparencyComponentUpdater,DeferRendererTasksAfterInput,DestroyProfileOnBrowserClose,DialMediaRouteProvider,ExtensionManifestV2Disabled,GlobalMediaControls,HttpsUpgrades,ImprovedCookieControls,LazyFrameLoading,LensOverlay,MediaRouter,PaintHolding,ThirdPartyStoragePartitioning,Translate --allow-pre-commit-input --disable-hang-monitor --disable-ipc-flooding-protection --disable-popup-blocking --disable-prompt-on-repost --disable-renderer-backgrounding --force-color-profile=srgb --metrics-recording-only --no-first-run --enable-automation --password-store=basic --use-mock-keychain --no-service-autorun --export-tagged-pdf --disable-search-engine-choice-screen --unsafely-disable-devtools-self-xss-warnings --no-sandbox --start-maximized --user-data-dir=/tmp/playwright_chromiumdev_profile-LYfofU --remote-debugging-pipe --no-startup-window
  - <launched> pid=5346
  - [pid=5346][err] [5346:5346:0417/140645.782825:ERROR:ozone_platform_x11.cc(245)] Missing X server or $DISPLAY
  - [pid=5346][err] [5346:5346:0417/140645.782874:ERROR:env.cc(257)] The platform failed to initialize.  Exiting.

```

# Test source

```ts
   1 | import {expect, test} from '@playwright/test'
   2 |
   3 |
   4 | test.beforeEach('Go to test URL', async ({page}) => {
   5 |     await page.goto('https://foden-testing-application.vercel.app/pages/iot-dashboard')
   6 |     // await page.goto('http://localhost:4200')
   7 | })
   8 |
   9 | test.describe('Form layouts page', () => {
   10 |
   11 |     test.beforeEach(async ({page}) => {
   12 |         await page.getByText('Forms').click()
   13 |         await page.getByText('Form Layouts').click()
   14 |     })
   15 |
   16 |     test('Input field', async ({page}) => {
   17 |         const usingTheGridEmailInput = page.locator('nb-card', {hasText: "Using the Grid"}).getByRole('textbox', {name: "Email"})
   18 |         await usingTheGridEmailInput.fill('test@test.com')
   19 |         await usingTheGridEmailInput.clear()
   20 |         await usingTheGridEmailInput.pressSequentially('test@test.com')
   21 |         await usingTheGridEmailInput.clear()
   22 |         await usingTheGridEmailInput.pressSequentially('test@test.com', {delay: 500})
   23 |
   24 |         //generic assertion
   25 |         const inputValue = await usingTheGridEmailInput.inputValue()
   26 |         expect(inputValue).toEqual('test@test.com')
   27 |
   28 |         //locator assertion
   29 |         await expect(usingTheGridEmailInput).toHaveValue('test@test.com')
   30 |
   31 |     })
   32 |
   33 |     test('Radio buttons', async ({page}) => {
   34 |         const usingTheGridForm = page.locator('nb-card', {hasText: "Using the Grid"})
   35 |         // await usingTheGridForm.getByLabel('Option 1').check({force: true})
   36 |         // or
   37 |         await usingTheGridForm.getByRole('radio', {name: 'Option 1'}).check({force: true})
   38 |         const radioStatus = usingTheGridForm.getByRole('radio', {name: 'Option 1'}).isChecked()
   39 |         expect(radioStatus).toBeTruthy()
   40 |
   41 |         expect(await usingTheGridForm.getByRole('radio', {name: 'Option 2'}).isChecked()).toBeFalsy()
   42 |     })
   43 |
   44 | })
   45 |
   46 | test('checkboxes', async ({page}) => {
   47 |     await page.getByText('Modal & Overlays').click()
   48 |     await page.getByText('Toastr').click()
   49 |
   50 |     await page.getByRole('checkbox', {name: "Hide on click"}).click({force: true}) //If the checkbox is already checked, click will uncheck the checkbox
   51 |     await page.getByRole('checkbox', {name: "Hide on click"}).check({force: true}) //If the checkbox is already checked, ckeck() will do nothing
   52 |     await page.getByRole('checkbox', {name: "Hide on click"}).uncheck({force: true}) //If the checkbox is already unchecked, uncheck() will do nothing
   53 |
   54 |     const allBoxes = page.getByRole('checkbox')
   55 |     for(const box of await allBoxes.all()){
   56 |         await box.check({force: true})
   57 |         expect(await box.isChecked()).toBeTruthy()
   58 |     }
   59 | })
   60 |
>  61 | test('lists and dropdowns', async ({page}) => {
      |     ^ Error: browserType.launch: Target page, context or browser has been closed
   62 |     const dropdownMenu = page.locator('ngx-header nb-select')
   63 |     await dropdownMenu.click()
   64 |     page.getByRole('list') //Use it when the list has the ul tag
   65 |     page.getByRole('listitem') //Use it when the list has li tag
   66 |
   67 |     // const optionList = page.getByRole('list').locator('nb-option') //Not widely used
   68 |     const optionList = page.locator('nb-option-list nb-option')
   69 |     await expect(optionList).toHaveText(["Light", "Dark", "Cosmic", "Corporate"])
   70 |     await optionList.filter({hasText: "Cosmic"}).click()
   71 |
   72 |     //verify color of element
   73 |     const header = page.locator('nb-layout-header')
   74 |     await expect(header).toHaveCSS('background-color', 'rgb(50, 50, 89)')
   75 |
   76 |     const colors = {
   77 |         "Light": "rgb(255, 255, 255)",
   78 |         "Dark": "rgb(34, 43, 69)",
   79 |         "Cosmic": "rgb(50, 50, 89)",
   80 |         "Corporate": "rgb(255, 255, 255)"
   81 |     }
   82 |
   83 |     await dropdownMenu.click()
   84 |     for(const color in colors){
   85 |         await optionList.filter({hasText: color}).click()
   86 |         await expect(header).toHaveCSS('background-color', colors[color])
   87 |         if(color != "Corporate"){
   88 |             await dropdownMenu.click()
   89 |         }
   90 |     }
   91 |
   92 | })
   93 |
   94 | test('tooltips', async ({page}) => {
   95 |     await page.getByText('Modal & Overlays').click()
   96 |     await page.getByText('Tooltip').click()
   97 |
   98 |     const tooltipCard = page.locator('nb-card', {hasText: 'Tooltip Placements'})
   99 |     await tooltipCard.getByRole('button', {name: "Top"}).hover()
  100 |
  101 |     const tooltip = await page.locator('nb-tooltip').textContent()
  102 |     expect(tooltip).toEqual('This is a tooltip')
  103 |
  104 |
  105 |     page.getByRole('tooltip') //Only use if you have a role tooltip created
  106 | })
  107 |
  108 | test('dialogs', async ({page}) => {
  109 |     await page.getByText('Tables & Data').click()
  110 |     await page.getByText('Smart Table').click()
  111 |
  112 |     //We need to register the action we want to treat with dialog before triggering the dialog
  113 |     page.on('dialog', dialog => {
  114 |         expect(dialog.message()).toEqual('Are you sure you want to delete?')
  115 |         dialog.accept()
  116 |     })
  117 |
  118 |     await page.getByRole('table').locator('tr', {hasText: "mdo@gmail.com"}).locator('.nb-trash').click()
  119 |     await expect(page.locator('table tr').first()).not.toHaveText("mdo@gmail.com")
  120 | })
  121 |
  122 | test('tables', async ({page}) => {
  123 |     await page.getByText('Tables & Data').click()
  124 |     await page.getByText('Smart Table').click()
  125 |
  126 |     //Get any row by text in row
  127 |     const targetRow = page.getByRole('row', {name: 'twitter@outlook.com'})
  128 |     await targetRow.locator('.nb-edit').click()
  129 |     await page.locator('input-editor').getByPlaceholder('Age').clear()
  130 |     await page.locator('input-editor').getByPlaceholder('Age').fill('35')
  131 |     await page.locator('.nb-checkmark').click()
  132 |
  133 |     //test filter of the table
  134 |     const ages = ["20", "30", "40", "200"]
  135 |     for(let age of ages){
  136 |         await page.locator('input-filter').getByPlaceholder('Age').clear()
  137 |         await page.locator('input-filter').getByPlaceholder('Age').fill(age)
  138 |         await page.waitForTimeout(5000)
  139 |
  140 |         const ageRows = page.locator('tbody tr')
  141 |
  142 |         for(let row of await ageRows.all()){
  143 |             const cellValue = await row.locator('td').last().textContent()
  144 |             if(age == "200"){
  145 |                 expect(await page.getByRole('table').textContent()).toContain('No data found')
  146 |             } else {
  147 |                 expect(cellValue).toEqual(age)
  148 |             }
  149 |         }
  150 |     }
  151 | })
  152 |
  153 | test('datepicker', async ({page}) => {
  154 |     await page.getByText('Forms').click()
  155 |     await page.getByText('Datepicker').click()
  156 |     const calendarInput = page.getByPlaceholder('Form Picker')
  157 |     await calendarInput.click()
  158 |
  159 |     let date = new Date()
  160 |     date.setDate(date.getDate() + 7)
  161 |     const expectedDate = date.getDate().toString()
```